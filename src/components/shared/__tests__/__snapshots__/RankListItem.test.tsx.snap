// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Interaction should simulate onClick 1`] = `
<View
  style={
    Object {
      "flex": 1,
    }
  }
>
  <View
    style={
      Array [
        Object {
          "alignItems": "center",
          "alignSelf": "stretch",
          "flexDirection": "row",
          "height": 80,
          "justifyContent": "flex-start",
          "paddingBottom": 0,
          "paddingLeft": 16,
          "paddingRight": 16,
          "paddingTop": 0,
        },
      ]
    }
  >
    <View
      style={
        Object {
          "alignItems": "center",
          "height": 24,
          "justifyContent": "center",
          "width": 24,
        }
      }
    >
      <Image
        source={
          Object {
            "canInstrument": true,
            "createTransformer": [Function],
            "getCacheKey": [Function],
            "process": [Function],
          }
        }
        style={
          Object {
            "height": 24,
            "width": 24,
          }
        }
      />
    </View>
    <View
      accessible={true}
      focusable={true}
      onClick={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Object {
          "flexDirection": "row",
          "marginLeft": 7,
          "opacity": 1,
        }
      }
    >
      <Image
        source={
          Object {
            "canInstrument": true,
            "createTransformer": [Function],
            "getCacheKey": [Function],
            "process": [Function],
          }
        }
        style={
          Object {
            "borderRadius": 21,
            "height": 42,
            "width": 42,
          }
        }
      />
    </View>
    <Text
      style={
        Array [
          Object {
            "color": "black",
            "fontSize": 14,
          },
          Object {
            "fontWeight": "bold",
            "marginLeft": 7,
          },
        ]
      }
    >
      unnamed
    </Text>
    <View
      style={
        Object {
          "alignItems": "flex-end",
          "flexDirection": "row",
          "position": "absolute",
          "right": 24,
        }
      }
    >
      <Text
        index={0}
        style={
          Array [
            Object {
              "color": "#00A8F0",
            },
            Object {
              "fontSize": 24,
            },
          ]
        }
      >
        0
      </Text>
      <Text
        index={0}
        style={
          Array [
            Object {
              "color": "#00A8F0",
            },
            Object {
              "fontSize": 18,
            },
          ]
        }
      >
        P
      </Text>
    </View>
  </View>
</View>
`;

exports[`Rendering renders without crashing 1`] = `
<View
  style={
    Object {
      "flex": 1,
    }
  }
>
  <View
    style={
      Array [
        Object {
          "alignItems": "center",
          "alignSelf": "stretch",
          "flexDirection": "row",
          "height": 80,
          "justifyContent": "flex-start",
          "paddingBottom": 0,
          "paddingLeft": 16,
          "paddingRight": 16,
          "paddingTop": 0,
        },
      ]
    }
  >
    <View
      style={
        Object {
          "alignItems": "center",
          "height": 24,
          "justifyContent": "center",
          "width": 24,
        }
      }
    >
      <Image
        source={
          Object {
            "canInstrument": true,
            "createTransformer": [Function],
            "getCacheKey": [Function],
            "process": [Function],
          }
        }
        style={
          Object {
            "height": 24,
            "width": 24,
          }
        }
      />
    </View>
    <View
      accessible={true}
      focusable={true}
      onClick={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Object {
          "flexDirection": "row",
          "marginLeft": 7,
          "opacity": 1,
        }
      }
    >
      <Image
        source={
          Object {
            "canInstrument": true,
            "createTransformer": [Function],
            "getCacheKey": [Function],
            "process": [Function],
          }
        }
        style={
          Object {
            "borderRadius": 21,
            "height": 42,
            "width": 42,
          }
        }
      />
    </View>
    <Text
      style={
        Array [
          Object {
            "color": "black",
            "fontSize": 14,
          },
          Object {
            "fontWeight": "bold",
            "marginLeft": 7,
          },
        ]
      }
    >
      unnamed
    </Text>
    <View
      style={
        Object {
          "alignItems": "flex-end",
          "flexDirection": "row",
          "position": "absolute",
          "right": 24,
        }
      }
    >
      <Text
        index={0}
        style={
          Array [
            Object {
              "color": "#00A8F0",
            },
            Object {
              "fontSize": 24,
            },
          ]
        }
      >
        0
      </Text>
      <Text
        index={0}
        style={
          Array [
            Object {
              "color": "#00A8F0",
            },
            Object {
              "fontSize": 18,
            },
          ]
        }
      >
        P
      </Text>
    </View>
  </View>
</View>
`;
